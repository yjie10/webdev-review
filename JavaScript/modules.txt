// below is a pillar; with inline script at the bottom and ES6 at the top

Webpack + ES6 - introduced export and import
// webpack is also a module bundler

// JS1
// can export mutiple functions
export const add = (a, b) => a + b;
// or: exports 1 thing
export default function add() { return a + b; }

// JS2
import { add } from './add';
// or: best used if the other file has an export default
import add from './add'; 

browserify - uses CommonJS; a _Module Bundler_; solves the lack of dependency resolution problem by bundling everything into one file
// JS file #1
module.exports = function add(a, b) { returns a+b; }

// JS file #2
var add = require("./add");

IIFE (Immediately Invoked Function Expression) - wrap everything in its own scope, solves the global namspace problem, reduce the number to 1
                                                 problem: 1) lack of _dependency resolution_

Script Tags - JS in separate file, link using <script> tags; problems: 1) code reusability
                                                                       2) lack of _dependency resolution_ (need to make sure scripts are added in proper order)
                                                                          so if script a needs to access script b but script b is not loaded yet, it's gonna fail
                                                                       3) global namspace problem still exists 
Inline Script - JS in html; 2 problems: 1) code reusability (different HTML file will need the same JS code to be copied again)
                                        2) global namspace (might accidentally assign the same name in later code)