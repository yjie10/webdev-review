JS: a single-threaded language that can be non-blocking.
 - single-threaded means there's one call stack only: do one thing at a time; 
 - FILO; LIFO - top of call stack runs first

 OS Related
  - other languages can be muti-threaded, meaning having multiple call stacks
  - can lead to deadlocks

WHAT IS A PROGRAM?

- allocate memory
- parse and execute / read and run commands

JS Engine consists of two parts: 1) Memory Heap (where allocation happens) and 2) Call Stack (where code is executed)

Memory
  - Memory Leak happens when the allocated memory is not used. 

Call Stack
  - Read and executes scripts

const one = () => {
  const two = () => {
    console.log('4');
  }
  two();
}

one();

console.log('4') // gets put on call stack third / first to remove from call stack after executing 
two() // gets put on call stack second / second to remove from call stack after executing
one() // gets put on call stack first / last to remove; call stack becomes empty

// following code will result in stack overflow
function foo() {
  foo(); 
} // endless recursion

Asynchronous vs Synchronous
Synchronous
  - pros: predictable, knows what comes next
  - cons: if there's a task that will take long time in between, program will freeze until the task gets done (slow)

Asynchronous
setTimeout is not really a part of JS, but the Web API.
to not block, can be async with callback functions. 

// async
console.log('1');
setTimeout(() => {
  console.log('2');
}, 2000); 
console.log('3');

// CALL STACK

// WEB API

// CALLBACK QUEUE

// EVENT LOOP


---

